// <auto-generated />
using System;
using Mapping.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mapping.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mapping.Data.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)");

                    b.HasKey("Id");

                    b.ToTable("Course", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Math",
                            Price = 30m
                        },
                        new
                        {
                            Id = 2,
                            Name = "English",
                            Price = 70m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Arabic",
                            Price = 40m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Science",
                            Price = 50m
                        },
                        new
                        {
                            Id = 5,
                            Name = "History",
                            Price = 20m
                        });
                });

            modelBuilder.Entity("Mapping.Data.Entities.Enrollment", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.HasKey("SectionId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Enrollments", (string)null);
                });

            modelBuilder.Entity("Mapping.Data.Entities.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("OfficeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId")
                        .IsUnique();

                    b.ToTable("Instructor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FName = "Ahmed",
                            LName = " Ali",
                            OfficeId = 1
                        },
                        new
                        {
                            Id = 2,
                            FName = "Momen",
                            LName = " Ahmed",
                            OfficeId = 2
                        },
                        new
                        {
                            Id = 3,
                            FName = "Beshoy",
                            LName = " Ashraf",
                            OfficeId = 3
                        },
                        new
                        {
                            Id = 4,
                            FName = "Mena ",
                            LName = "Maged",
                            OfficeId = 4
                        },
                        new
                        {
                            Id = 5,
                            FName = "Boles ",
                            LName = "Gorge",
                            OfficeId = 5
                        });
                });

            modelBuilder.Entity("Mapping.Data.Entities.Office", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("OfficeLocation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Office", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OfficeLocation = "building A",
                            OfficeName = "Off_05"
                        },
                        new
                        {
                            Id = 2,
                            OfficeLocation = "building B",
                            OfficeName = "Off_12"
                        },
                        new
                        {
                            Id = 3,
                            OfficeLocation = "Adminstration",
                            OfficeName = "Off_32"
                        },
                        new
                        {
                            Id = 4,
                            OfficeLocation = "IT Department",
                            OfficeName = "Off_44"
                        },
                        new
                        {
                            Id = 5,
                            OfficeLocation = "IT Department",
                            OfficeName = "Off_43"
                        });
                });

            modelBuilder.Entity("Mapping.Data.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Participant", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Mapping.Data.Entities.Quiz", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("CourseId");

                    b.ToTable("Quiz");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Mapping.Data.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("MeetingDay")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Schedule", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MeetingDay = "17",
                            Title = "Daily"
                        },
                        new
                        {
                            Id = 2,
                            MeetingDay = "66",
                            Title = "TwiceAWeek"
                        },
                        new
                        {
                            Id = 3,
                            MeetingDay = "40",
                            Title = "Weekend"
                        },
                        new
                        {
                            Id = 4,
                            MeetingDay = "36",
                            Title = "DayAfterDay"
                        });
                });

            modelBuilder.Entity("Mapping.Data.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer");

                    b.Property<string>("SectionName")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Section", (string)null);
                });

            modelBuilder.Entity("Mapping.Data.Entities.Corprate", b =>
                {
                    b.HasBaseType("Mapping.Data.Entities.Participant");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Corprate", (string)null);
                });

            modelBuilder.Entity("Mapping.Data.Entities.Individual", b =>
                {
                    b.HasBaseType("Mapping.Data.Entities.Participant");

                    b.Property<bool>("IsIntern")
                        .HasColumnType("boolean");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearOfGraduation")
                        .HasColumnType("integer");

                    b.ToTable("Individual", (string)null);
                });

            modelBuilder.Entity("Mapping.Data.Entities.MultipleChoiceQuiz", b =>
                {
                    b.HasBaseType("Mapping.Data.Entities.Quiz");

                    b.Property<char>("CorrectAnswer")
                        .HasColumnType("character(1)");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OptionD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("MultipleChoiceQuizes");
                });

            modelBuilder.Entity("Mapping.Data.Entities.TrueAndFalseQuiz", b =>
                {
                    b.HasBaseType("Mapping.Data.Entities.Quiz");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("boolean");

                    b.ToTable("TrueAndFalseQuizes");
                });

            modelBuilder.Entity("Mapping.Data.Entities.Enrollment", b =>
                {
                    b.HasOne("Mapping.Data.Entities.Participant", "Participants")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mapping.Data.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participants");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Mapping.Data.Entities.Instructor", b =>
                {
                    b.HasOne("Mapping.Data.Entities.Office", "office")
                        .WithOne("instructor")
                        .HasForeignKey("Mapping.Data.Entities.Instructor", "OfficeId");

                    b.Navigation("office");
                });

            modelBuilder.Entity("Mapping.Data.Entities.Quiz", b =>
                {
                    b.HasOne("Mapping.Data.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Mapping.Data.Entities.Section", b =>
                {
                    b.HasOne("Mapping.Data.Entities.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mapping.Data.Entities.Instructor", "Instructor")
                        .WithMany("sections")
                        .HasForeignKey("InstructorId");

                    b.HasOne("Mapping.Data.Entities.Schedule", "Schedule")
                        .WithMany("sections")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Mapping.Data.Entities.TimeSlot", "TimeSlot", b1 =>
                        {
                            b1.Property<int>("SectionId")
                                .HasColumnType("integer");

                            b1.Property<TimeSpan>("EndTime")
                                .HasColumnType("time")
                                .HasColumnName("EndTime");

                            b1.Property<TimeSpan>("StartTime")
                                .HasColumnType("time")
                                .HasColumnName("StartTime");

                            b1.HasKey("SectionId");

                            b1.ToTable("TimeSlot");

                            b1.WithOwner()
                                .HasForeignKey("SectionId");
                        });

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Schedule");

                    b.Navigation("TimeSlot")
                        .IsRequired();
                });

            modelBuilder.Entity("Mapping.Data.Entities.Corprate", b =>
                {
                    b.HasOne("Mapping.Data.Entities.Participant", null)
                        .WithOne()
                        .HasForeignKey("Mapping.Data.Entities.Corprate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mapping.Data.Entities.Individual", b =>
                {
                    b.HasOne("Mapping.Data.Entities.Participant", null)
                        .WithOne()
                        .HasForeignKey("Mapping.Data.Entities.Individual", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mapping.Data.Entities.MultipleChoiceQuiz", b =>
                {
                    b.HasOne("Mapping.Data.Entities.Quiz", null)
                        .WithOne()
                        .HasForeignKey("Mapping.Data.Entities.MultipleChoiceQuiz", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mapping.Data.Entities.TrueAndFalseQuiz", b =>
                {
                    b.HasOne("Mapping.Data.Entities.Quiz", null)
                        .WithOne()
                        .HasForeignKey("Mapping.Data.Entities.TrueAndFalseQuiz", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mapping.Data.Entities.Course", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Mapping.Data.Entities.Instructor", b =>
                {
                    b.Navigation("sections");
                });

            modelBuilder.Entity("Mapping.Data.Entities.Office", b =>
                {
                    b.Navigation("instructor");
                });

            modelBuilder.Entity("Mapping.Data.Entities.Schedule", b =>
                {
                    b.Navigation("sections");
                });
#pragma warning restore 612, 618
        }
    }
}
